{"version":3,"sources":["_reducer/RGeolocation.js","_context/CGeolocation.js","Main.js","Loader.js","Search.js","Location.js","Result.js","Forecast.js","Report.js","DHM.js","Weather.js","App.js","vector/vector-landscape-2.jpg","reportWebVitals.js","index.js"],"names":["REDUCER_GEOGRAPHICAL_REPORTS","state","action","forecast","type","hourly","length","i","obj","dt","Date","tf","getUTCHours","d","toLocaleDateString","weekday","t","mdt","icon","process","sky","temp","push","daily","console","log","default","LocationContext","createContext","LocationsProvider","children","useState","location","fLocation","currentLocation","setCurrentLocation","useReducer","currentLocationReport","currentLocationReportDispatch","weather","setWeather","ifLoaded","setIfLoaded","IfLoadedPercentage","setIfLoadedPercentage","ifPickLocation","setIfPickLocation","ifPickReport","setIfPickReport","onLoad","useRef","KELVIN_FORMULA","WEATHER_LOCATIONS","a","ifRunAgain","axios","get","onDownloadProgress","progressEvent","percentCompleted","Math","round","loaded","total","response","data","list","weatherArr","fstr","toLowerCase","cityID","name","flag","lcon","ldeg","deg","floor","degIcon","lat","lon","GEOGRAPHICAL_LOCATION","publicIp","v4","clientIP","georesponse","geodata","latitude","longitude","cname","WEATHER","skyType","coord","date","toString","split","slice","join","feels","wind","clouds","pressure","toFixed","sunrise","toLocaleTimeString","hour12","hour","minute","sunset","country","countryData","coordinatesInfo","coordinatesInfoData","current","GEOGRAPHICAL_REPORTS","ONECALL","REPORT_FORECASTS","useEffect","navigator","geolocation","getCurrentPosition","position","coords","Fragment","Provider","value","Main","useContext","pad","ifWebview","eval","URLSearchParams","window","search","style","padding","bgcolor","className","ref","IndeterminateiLoader","backgroundColor","Search","placeholder","disabled","onFocus","debounceTimeout","onChange","e","target","Location","src","Result","map","w","onClick","loadThis","Forecast","locality","size","Report","DHM","pointerEvents","Weather","currrentLocationToggle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","id","backgroundImage","bg","document","getElementById"],"mappings":"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","file":"static/js/main.991bfdd2.chunk.js","sourcesContent":["export const REDUCER_GEOGRAPHICAL_REPORTS = (state, action) => {\r\n    const forecast = [];\r\n    switch (action.type) {\r\n        case \"hourly\":\r\n            const hourly = action.forecast[\"hourly\"];\r\n            forecast.length = 0;\r\n            for (let i = 0; i < hourly.length; i++) {\r\n                const obj = {};\r\n                const dt = new Date(hourly[i][\"dt\"] * 1000);\r\n                const tf = dt.getUTCHours() % 12 + 1;\r\n                const d = dt.toLocaleDateString('en-US', { weekday: 'short' });\r\n                const t = `${tf}${dt.getUTCHours() > 12 ? \"pm\" : \"am\"}`;\r\n                const mdt = `${d} of ${t}`;\r\n                obj.dt = mdt;\r\n                obj.icon = `${process.env.REACT_APP_WEATHER_ICON}${hourly[i][\"weather\"][0][\"icon\"]}@2x.png`;\r\n                obj.sky = hourly[i][\"weather\"][0][\"description\"];\r\n                obj.temp = `${hourly[i][\"temp\"]} °C`;\r\n                forecast.push(obj);\r\n            }\r\n            return { forecast, type: action.type }\r\n        case \"daily\":\r\n            const daily = action.forecast[\"daily\"];\r\n            forecast.length = 0;\r\n            for (let i = 0; i < daily.length; i++) {\r\n                const obj = {};\r\n                console.log(daily[i])\r\n                const dt = new Date(daily[i][\"dt\"] * 1000);\r\n                const tf = dt.getUTCHours() % 12 + 1;\r\n                const d = dt.toLocaleDateString('en-US', { weekday: 'long' });\r\n                const mdt = `${d}`;\r\n                obj.dt = mdt;\r\n                obj.icon = `${process.env.REACT_APP_WEATHER_ICON}${daily[i][\"weather\"][0][\"icon\"]}@2x.png`;\r\n                obj.sky = daily[i][\"weather\"][0][\"description\"];\r\n                obj.temp = `${daily[i][\"temp\"][\"max\"]} °C`;\r\n                forecast.push(obj);\r\n            }\r\n            return { forecast, type: action.type }\r\n        default:\r\n            return { forecast: action.default, type: action.type }\r\n    }\r\n}","import React, { createContext, useState, useEffect, useRef, useReducer } from \"react\";\r\nimport axios from \"axios\";\r\nimport publicIp from \"public-ip\";\r\nimport { REDUCER_GEOGRAPHICAL_REPORTS } from \"../_reducer/RGeolocation\";\r\n\r\nexport const LocationContext = createContext();\r\n\r\nexport const LocationsProvider = ({ children }) => {\r\n  const [location, fLocation] = useState(\"\");\r\n  const [currentLocation, setCurrentLocation] = useState();\r\n  const [currentLocationReport, currentLocationReportDispatch] = useReducer(REDUCER_GEOGRAPHICAL_REPORTS, []);\r\n  const [weather, setWeather] = useState([]);\r\n  const [ifLoaded, setIfLoaded] = useState(false);\r\n  const [IfLoadedPercentage, setIfLoadedPercentage] = useState(0);\r\n  const [ifPickLocation, setIfPickLocation] = useState(false);\r\n  const [ifPickReport, setIfPickReport] = useState(false);\r\n  const onLoad = useRef(true);\r\n  const KELVIN_FORMULA = 273.1;\r\n  const WEATHER_LOCATIONS = async (ifRunAgain = false) => {\r\n    console.log(ifRunAgain)\r\n    setIfLoaded(false);\r\n    setIfLoadedPercentage(0);\r\n    try {\r\n      if (location.length > 0) {\r\n        const response = await axios.get(\r\n          process.env.REACT_APP_COUNTRY_LIST + location,\r\n          {\r\n            onDownloadProgress: (progressEvent) => {\r\n              let percentCompleted = Math.round(\r\n                (progressEvent.loaded * 100) / progressEvent.total\r\n              );\r\n              setIfLoadedPercentage(percentCompleted);\r\n            },\r\n          }\r\n        );\r\n        const data = await response.data;\r\n        const list = data.list;\r\n        let weatherArr = [];\r\n        for (let i = 0; i < list.length; i++) {\r\n          let fstr = `${list[i][\"sys\"][\"country\"].toLowerCase()}.png`;\r\n          weatherArr.push({\r\n            cityID: list[i][\"id\"],\r\n            name: `${list[i][\"name\"]} ${list[i][\"sys\"][\"country\"]}`,\r\n            flag: process.env.REACT_APP_COUNTRY_FLAG + fstr,\r\n            lcon: list[i][\"weather\"][0][\"icon\"],\r\n            ldeg: list[i][\"main\"][\"temp\"],\r\n            icon: `${process.env.REACT_APP_WEATHER_ICON}${list[i][\"weather\"][0][\"icon\"]}.png`,\r\n            deg: `${Math.floor(list[i][\"main\"][\"temp\"] - KELVIN_FORMULA)}°`,\r\n            degIcon: \"°\",\r\n            lat: list[i][\"coord\"][\"lat\"],\r\n            lon: list[i][\"coord\"][\"lon\"],\r\n          });\r\n        }\r\n        setWeather(weatherArr);\r\n        setIfLoaded(true);\r\n      } else {\r\n        setIfLoaded(true);\r\n        setIfLoadedPercentage(100);\r\n      }\r\n    } catch (err) {\r\n      setIfLoaded(true);\r\n      setIfLoadedPercentage(100);\r\n    }\r\n  };\r\n\r\n  const GEOGRAPHICAL_LOCATION = async (\r\n    lat = null,\r\n    lon = null,\r\n    lcon = null,\r\n    ldeg = null\r\n  ) => {\r\n    setIfLoaded(false);\r\n    setIfLoadedPercentage(0);\r\n    try {\r\n      const clientIP = await publicIp.v4();\r\n      const georesponse = await axios.get(\r\n        `${process.env.REACT_APP_GET_IP}${clientIP}/json`,\r\n        {\r\n          onDownloadProgress: (progressEvent) => {\r\n            let percentCompleted = Math.round(\r\n              (progressEvent.loaded * 100) / progressEvent.total\r\n            );\r\n            setIfLoadedPercentage(percentCompleted);\r\n          },\r\n        }\r\n      );\r\n      const geodata = await georesponse.data;\r\n      const response = await axios.get(\r\n        `${process.env.REACT_APP_LOCATION_GEO}&lat=${lat ? lat : geodata.latitude\r\n        }&lon=${lon ? lon : geodata.longitude}`,\r\n        {\r\n          onDownloadProgress: (progressEvent) => {\r\n            let percentCompleted = Math.round(\r\n              (progressEvent.loaded * 100) / progressEvent.total\r\n            );\r\n            setIfLoadedPercentage(percentCompleted);\r\n          },\r\n        }\r\n      );\r\n      const data = await response.data;\r\n      let cname = data[\"sys\"][\"country\"];\r\n      let fstr = `${data[\"sys\"][\"country\"].toLowerCase()}.png`;\r\n      let WEATHER = {\r\n        skyType: data[\"weather\"][0][\"main\"],\r\n        cityID: data[\"id\"],\r\n        coord: data[\"coord\"],\r\n        name: data[\"name\"],\r\n        flag: process.env.REACT_APP_COUNTRY_FLAG + fstr,\r\n        date: new Date(data[\"dt\"] * 1000)\r\n          .toString()\r\n          .split(\"(\")[0]\r\n          .split(\" \")\r\n          .slice(0, 3)\r\n          .join(\" \"),\r\n        icon: `${process.env.REACT_APP_WEATHER_ICON +\r\n          (lcon ? lcon : data[\"weather\"][0][\"icon\"])\r\n          }@2x.png`,\r\n        deg: `${Math.floor(\r\n          (ldeg ? ldeg : data[\"main\"][\"temp\"]) - KELVIN_FORMULA\r\n        )}`,\r\n        degIcon: \"°\",\r\n        lat: data[\"coord\"][\"lat\"],\r\n        lon: data[\"coord\"][\"lon\"],\r\n        sky: data[\"weather\"][0][\"description\"],\r\n        feels: `${Math.floor(\r\n          (ldeg ? ldeg : data[\"main\"][\"feels_like\"]) - KELVIN_FORMULA\r\n        )}`,\r\n        wind: `${data[\"wind\"][\"speed\"]}m/s`,\r\n        clouds: `${data[\"clouds\"][\"all\"]}`,\r\n        pressure: ((data[\"main\"][\"pressure\"] * 100) / 101325).toFixed(3),\r\n        sunrise: new Date(data[\"sys\"][\"sunrise\"] * 1000).toLocaleTimeString({},\r\n          { hour12: true, hour: 'numeric', minute: 'numeric' }\r\n        ),\r\n        sunset: new Date(data[\"sys\"][\"sunset\"] * 1000).toLocaleTimeString({},\r\n          { hour12: true, hour: 'numeric', minute: 'numeric' }\r\n        ),\r\n      };\r\n      const country = await axios.get(\r\n        `${process.env.REACT_APP_GET_COUNTRY_DETAILS}${cname}`\r\n      );\r\n      const countryData = await country.data;\r\n      WEATHER[\"country\"] = countryData[\"name\"];\r\n\r\n      const coordinatesInfo = await axios.get(\r\n        `${process.env.REACT_APP_GET_LOCATION_INFO}latitude=${lat ? lat : geodata.latitude\r\n        }&longitude=${lon ? lon : geodata.longitude}`\r\n      );\r\n      const coordinatesInfoData = await coordinatesInfo.data;\r\n\r\n      WEATHER[\"locality\"] = coordinatesInfoData[\"locality\"];\r\n\r\n      setCurrentLocation({\r\n        current: WEATHER\r\n      });\r\n      fLocation(\"\");\r\n      setWeather([]);\r\n      setIfLoaded(true);\r\n    } catch (err) {\r\n      setIfLoaded(true);\r\n      setIfLoadedPercentage(100);\r\n    }\r\n  };\r\n\r\n  const GEOGRAPHICAL_REPORTS = async (lat, lon, type) => {\r\n    setIfLoaded(false);\r\n    setIfLoadedPercentage(0);\r\n    try {\r\n      const ONECALL = await axios.get(\r\n        `${process.env.REACT_APP_GET_ONECALL}&lat=${lat}&lon=${lon}`\r\n      );\r\n      const REPORT_FORECASTS = await ONECALL.data;\r\n      currentLocationReportDispatch({ type: type, forecast: REPORT_FORECASTS, default: [] })\r\n      setIfLoaded(true);\r\n      setIfPickReport(true);\r\n    } catch (err) {\r\n      setIfLoaded(true);\r\n      setIfLoadedPercentage(100);\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    if (onLoad.current) {\r\n      onLoad.current = false;\r\n      if (\"geolocation\" in navigator) {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n          const latitude = position.coords.latitude;\r\n          const longitude = position.coords.longitude;\r\n          GEOGRAPHICAL_LOCATION(latitude, longitude);\r\n        });\r\n      }\r\n      GEOGRAPHICAL_LOCATION();\r\n      return;\r\n    } else {\r\n      if (location.length > 0) {\r\n        WEATHER_LOCATIONS();\r\n      } else {\r\n        setWeather([]);\r\n      }\r\n    }\r\n  }, [location]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <LocationContext.Provider\r\n        value={{\r\n          location,\r\n          fLocation,\r\n          weather,\r\n          ifLoaded,\r\n          IfLoadedPercentage,\r\n          setIfLoaded,\r\n          setIfLoadedPercentage,\r\n          currentLocation,\r\n          currentLocationReport,\r\n          ifPickLocation,\r\n          setIfPickLocation,\r\n          ifPickReport,\r\n          setIfPickReport,\r\n          WEATHER_LOCATIONS,\r\n          GEOGRAPHICAL_LOCATION,\r\n          GEOGRAPHICAL_REPORTS\r\n        }}\r\n      >\r\n        {children}\r\n      </LocationContext.Provider>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React, { useContext, useEffect, useRef } from \"react\";\r\nimport IndeterminateiLoader from \"./Loader\";\r\nimport { LocationContext } from \"./_context/CGeolocation\";\r\nimport Weather from \"./Weather\";\r\nconst Main = ({ location }) => {\r\n  const { ifLoaded, currentLocation } = useContext(LocationContext);\r\n  const pad = useRef();\r\n  useEffect(() => {\r\n    const ifWebview = eval(new URLSearchParams(window.location.search).get(\"webview\"));\r\n    if (ifWebview) {\r\n      pad.current.style.padding = \"30px 20px 20px 20px\";\r\n    } else {\r\n      pad.current.style.padding = \"0px 20px 20px 20px\";\r\n    }\r\n  }, []);\r\n  return (\r\n    <React.Fragment>\r\n      {!ifLoaded && <IndeterminateiLoader bgcolor=\"#706dc5\" />}\r\n      <div className=\"weather-main-app\" ref={pad}>\r\n        <div className=\"weather-info\">\r\n          {currentLocation && (\r\n            <Weather />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\nconst IndeterminateiLoader = ({ bgcolor }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"progress_bar\">\r\n        <div\r\n          className=\"indeterminate\"\r\n          style={{ backgroundColor: bgcolor }}\r\n        ></div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default IndeterminateiLoader;\r\n","import React, { useContext } from \"react\";\r\nimport { LocationContext } from \"./_context/CGeolocation\";\r\nimport { DebounceInput } from \"react-debounce-input\";\r\n\r\nconst Search = () => {\r\n  const { location, fLocation, ifLoaded, setIfPickLocation, ifPickReport } = useContext(\r\n    LocationContext\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <DebounceInput\r\n        type=\"text\"\r\n        className={`weather-search`}\r\n        placeholder=\"Enter Location\"\r\n        disabled={(!ifLoaded && ifPickReport) || (!ifLoaded && !ifPickReport) ? true : false}\r\n        onFocus={() => {\r\n          setIfPickLocation(false);\r\n        }}\r\n        debounceTimeout={700}\r\n        value={location}\r\n        onChange={(e) => {\r\n          fLocation(e.target.value);\r\n        }}\r\n      />\r\n\r\n\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nconst Location = ({ name, flag, temp, icon, lat, lon }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <li className=\"location-info\">\r\n        <span className=\"location-info-name\">{name}</span>\r\n        <span className=\"location-info-cflag\">\r\n          <img className=\"location-info-flag\" src={flag} />\r\n        </span>\r\n        <span className=\"location-info-temp\">{temp}</span>\r\n        <span className=\"location-info-cicon\">\r\n          <img className=\"location-info-icon\" src={icon} />\r\n        </span>\r\n        <span className=\"location-info-coordinates\">{`${lat} ${lon}`}</span>\r\n      </li>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n","import React, { useContext } from \"react\";\r\nimport Location from \"./Location\";\r\nimport { LocationContext } from \"./_context/CGeolocation\";\r\n\r\nconst Result = () => {\r\n  const {\r\n    weather,\r\n    location,\r\n    ifPickLocation,\r\n    setIfPickLocation,\r\n    ifPickReport,\r\n    GEOGRAPHICAL_LOCATION,\r\n  } = useContext(LocationContext);\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        className={`weather-search-result ${weather.length > 0 && location.length > 0 && !ifPickLocation\r\n          ? \"weather-search-result-show\"\r\n          : \"\"\r\n          }`}\r\n      >\r\n        <div\r\n          className={`location-result ${location.length > 0 ? \"show-location-result\" : \"\"\r\n            }`}\r\n        >\r\n          <ul>\r\n            {weather.map((w) => {\r\n              return (\r\n                <div\r\n                  className=\"location-data\"\r\n                  key={w.cityID}\r\n                  onClick={(e) => {\r\n                    setIfPickLocation(true);\r\n                    GEOGRAPHICAL_LOCATION(w.lat, w.lon, w.lcon, w.ldeg);\r\n                  }}\r\n                >\r\n                  <Location\r\n                    name={w.name}\r\n                    flag={w.flag}\r\n                    temp={w.deg}\r\n                    icon={w.icon}\r\n                    lat={w.lat}\r\n                    lon={w.lon}\r\n                    loadThis={GEOGRAPHICAL_LOCATION}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React, { useContext } from \"react\";\r\nimport { LocationContext } from \"./_context/CGeolocation\";\r\nimport FeatherIcon from \"feather-icons-react\";\r\n\r\nconst Forecast = () => {\r\n    const { currentLocation } = useContext(LocationContext);\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"current-location-info-data\">\r\n                <div className=\"current-location-today\">\r\n                    <div>\r\n                        <p>{`${currentLocation[\"current\"].name} ${currentLocation[\"current\"].locality}`}</p>\r\n                        <p className=\"current-location-yours\">\r\n                            <span>\r\n                                {currentLocation[\"current\"].country}\r\n                                <img src={currentLocation[\"current\"].flag} />\r\n                            </span>\r\n                        </p>\r\n                        <p>\r\n                            {currentLocation[\"current\"].date} , Feels like {currentLocation[\"current\"].feels} <span>{currentLocation[\"current\"].degIcon}C</span>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <p className=\"current-location-deg\">\r\n                    {currentLocation[\"current\"].deg}\r\n                    <span>\r\n                        <span>{currentLocation[\"current\"].degIcon}</span>C\r\n                    </span>\r\n                </p>\r\n                <p className=\"current-location-sky\">{currentLocation[\"current\"].sky} <img src={currentLocation[\"current\"].icon} className=\"current-location-icon\" /> </p>\r\n                <p className=\"current-location-sunset-sunrise\">\r\n                    Sunrise &nbsp;{currentLocation[\"current\"].sunrise}\r\n                </p>\r\n                <p className=\"current-location-sunset-sunrise\">\r\n                    Sunset &nbsp; {currentLocation[\"current\"].sunset}\r\n                </p>\r\n            </div>\r\n            <div className=\"current-location-temp\">\r\n                <div className=\"current-location-weather\">\r\n                    <div className=\"current-location-wind\">\r\n                        <FeatherIcon icon=\"wind\" size=\"15\" />\r\n                        <span>{currentLocation[\"current\"].wind}</span>\r\n                    </div>\r\n                    <div className=\"current-location-wind\">\r\n                        <FeatherIcon icon=\"cloud\" size=\"15\" />\r\n                        <span>{currentLocation[\"current\"].clouds}%</span>\r\n                    </div>\r\n                    <div className=\"current-location-wind\">\r\n                        <FeatherIcon icon=\"alert-circle\" size=\"15\" />\r\n                        <span>\r\n                            {currentLocation[\"current\"].pressure} <span className=\"mbar\">hpa</span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Forecast\r\n","import React, { useContext } from \"react\";\r\nimport { LocationContext } from \"./_context/CGeolocation\";\r\nimport FeatherIcon from \"feather-icons-react\";\r\n\r\nconst Report = () => {\r\n    const { currentLocation, GEOGRAPHICAL_REPORTS } = useContext(LocationContext);\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"current-location-reports\">\r\n                <div className=\"current-location-report-type\" onClick={() => GEOGRAPHICAL_REPORTS(currentLocation[\"current\"][\"coord\"][\"lat\"], currentLocation[\"current\"][\"coord\"][\"lon\"], \"hourly\")}>\r\n                    <p>\r\n                        3 Days Hourly Forecast{\" \"}\r\n                        <span>\r\n                            <FeatherIcon icon=\"chevron-right\" size=\"15\" />\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"current-location-report-type\" onClick={() => GEOGRAPHICAL_REPORTS(currentLocation[\"current\"][\"coord\"][\"lat\"], currentLocation[\"current\"][\"coord\"][\"lon\"], \"daily\")}>\r\n                    <p>\r\n                        7 Days Forecast{\" \"}\r\n                        <span>\r\n                            <FeatherIcon icon=\"chevron-right\" size=\"15\" />\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Report\r\n","import React, { useContext } from \"react\";\r\nimport { LocationContext } from \"./_context/CGeolocation\";\r\nimport FeatherIcon from \"feather-icons-react\";\r\n\r\nconst DHM = () => {\r\n    const { currentLocation, ifLoaded, ifPickReport, setIfPickReport, currentLocationReport } = useContext(LocationContext);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div style={{ pointerEvents: !ifLoaded ? \"none\" : \"auto\" }} className={`current-location-dhm ${currentLocation && ifLoaded && ifPickReport ? \"current-location-dhm-show\" : \"\"}`}>\r\n                <p className=\"current-location-report-back\" onClick={() => setIfPickReport(false)}> <FeatherIcon icon=\"chevron-left\" size=\"15\" /> <span>Back</span></p>\r\n                <div className=\"current-location-dhm-c\">\r\n                    <ul>\r\n                        {currentLocationReport[\"forecast\"] && currentLocationReport[\"forecast\"].map((e, i) => {\r\n                            return (\r\n                                <React.Fragment key={i}>\r\n                                    <div className=\"location-data\">\r\n                                        <li className=\"location-info\">\r\n                                            <span className=\"location-info-name-report\">{e[\"sky\"]}</span>\r\n                                            <span className=\"location-info-cicon-report\">\r\n                                                <img className=\"location-info-icon-report\" src={e[\"icon\"]} />\r\n                                            </span>\r\n                                            <span className=\"location-info-temp-report\">{e[\"temp\"]}</span>\r\n\r\n                                            <span className=\"location-info-coordinates-report\">{e[\"dt\"]}</span>\r\n                                        </li>\r\n                                    </div>\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default DHM\r\n","import React, { useContext } from \"react\";\r\nimport { LocationContext } from \"./_context/CGeolocation\";\r\nimport Search from \"./Search\";\r\nimport Result from \"./Result\";\r\nimport Forecast from \"./Forecast\";\r\nimport Report from \"./Report\";\r\nimport DHM from \"./DHM\";\r\n\r\nconst Weather = () => {\r\n  const { location, fLocation, weather, ifPickLocation, ifPickReport, currentLocationReport } = useContext(LocationContext);\r\n  const currrentLocationToggle = weather.length > 0 && (location.length > 0 && !ifPickLocation) || ifPickReport;\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"current-location-info\">\r\n        <div className={`current-location-data ${currrentLocationToggle\r\n          ? \"current-location-data-hide\"\r\n          : \"\"\r\n          }`}>\r\n          <Search />\r\n\r\n          <Forecast />\r\n          <Report />\r\n        </div>\r\n        <Result />\r\n        <DHM />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport Main from \"./Main\";\r\nimport { LocationsProvider } from \"./_context/CGeolocation\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"weather-app\">\r\n      <LocationsProvider>\r\n        <Main />\r\n      </LocationsProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export default __webpack_public_path__ + \"static/media/vector-landscape-2.d9f0f3a4.jpg\";","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport bg from \"./vector/vector-landscape-2.jpg\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div id=\"react-weather\" style={{ backgroundImage: `url(${bg})` }}>\r\n      <App />\r\n    </div>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}